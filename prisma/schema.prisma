// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CASHIER
  CUSTOMER
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  SUDAH_DIGUNAKAN
  DAPAT_DIGUNAKAN
  EXPIRED
  MENUNGGU_PEMBAYARAN
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

model Guide {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  gender      Gender
  birthdate   DateTime      @db.Date
  image       String?
  desc        String?
  detailTrans DetailTrans[]
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  number        String?
  password      String
  role          Role
  nationality   Nationality?  @relation(fields: [nationalityId], references: [id])
  nationalityId String?
  transaction   Transaction[]
  Logs          Logs[]
}

model Order {
  id             String        @id @default(uuid())
  image          String?
  name           String
  desc           String?
  price          Decimal       @db.Decimal(18, 2)
  createdAt      DateTime      @default(now())
  posOnly        Boolean       @default(false)
  detailTrans    DetailTrans[]
  category       Category?     @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  orderSubType   OrderSubType? @relation(fields: [orderSubTypeId], references: [id])
  orderSubTypeId Int?
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String
  order Order[]
}

model OrderType {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  orderSubType OrderSubType[]
}

model OrderSubType {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  minimumUnits Int?
  orderType    OrderType @relation(fields: [orderTypeId], references: [id])
  orderTypeId  Int
  order        Order[]
}

model Transaction {
  id            String        @id @default(uuid())
  total         Decimal       @db.Decimal(18, 2)
  method        String
  status        Status
  plannedDate   DateTime
  createdDate   DateTime      @default(now())
  discount      String
  cashback      String
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?
  nationality   Nationality?  @relation(fields: [nationalityId], references: [id])
  nationalityId String?
  detailTrans   DetailTrans[]
}

model DetailTrans {
  id            String      @id @default(uuid())
  amount        Int
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       String
  guide         Guide?      @relation(fields: [guideId], references: [id])
  guideId       String?
}

model Nationality {
  id           String        @id @default(uuid())
  name         String
  code         String
  users        User[]
  transactions Transaction[]
}

model Contents {
  id           Int      @id @default(autoincrement())
  page         Pages    @relation(fields: [pageId], references: [id])
  pageId       Int
  sectionName  String   @db.Text
  sectionOrder Int
  context      Json
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Pages {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  contents  Contents[]
}

model Events {
  id          Int            @id @default(autoincrement())
  iteration   EventIteration @relation(fields: [iterationId], references: [id])
  iterationId Int
  isFree      Boolean
  price       Float          @default(0)
  name        String
  desc        String         @db.Text
  image       String
}

model EventIteration {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  events Events[]
}

model Logs {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    Action
  activity  String
  changedAt String
  status    String
  createdAt DateTime @default(now())
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  desc      String   @db.Text
  image     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
