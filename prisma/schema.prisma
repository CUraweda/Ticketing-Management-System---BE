// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  CUSTOMER
}

enum Gender {
  MALE
  FEMALE
}

enum Category {
  UMUM
  PELAJAR
  MANCANEGARA
}

enum Interval {
  PERMINGGU
  PERBULAN
  PERTAHUN
}

enum Status {
  SUDAH_DIGUNAKAN
  DAPAT_DIGUNAKAN
  EXPIRED
  MENUNGGU_PEMBAYARAN
}

model Cashier {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  number      String?
  password    String
  transaction Transaction[]
}

model Guide {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  gender      Gender
  birthdate   DateTime
  image       String?
  desc        String?
  DetailTrans DetailTrans[]
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  number        String?
  password      String
  role          Role
  transaction   Transaction[]
  nationality   Nationality?  @relation(fields: [nationalityId], references: [id])
  nationalityId String?
  Tokens        Tokens[]
}

model Tokens {
  id     String @id
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Order {
  id          String        @id @default(uuid())
  image       String?
  name        String
  desc        String?
  price       Decimal       @db.Decimal(18, 2)
  category    Category?
  interval    Interval?
  createdAt   DateTime      @default(now())
  detailTrans DetailTrans[]
}

model Transaction {
  id            String        @id @default(uuid())
  total         Decimal       @db.Decimal(18, 2)
  method        String
  status        Status
  plannedDate   DateTime
  createdDate   DateTime      @default(now())
  discount      String
  cashback      String
  user          User?         @relation(fields: [userID], references: [id])
  userID        String?
  cashier       Cashier?      @relation(fields: [cashierID], references: [id])
  cashierID     String?
  nationality   Nationality?  @relation(fields: [nationalityID], references: [id])
  nationalityID String?
  detailTrans   DetailTrans[]
}

model DetailTrans {
  id            String      @id @default(uuid())
  amount        Int
  transaction   Transaction @relation(fields: [transactionID], references: [id])
  transactionID String
  order         Order       @relation(fields: [orderID], references: [id])
  orderID       String
  guide         Guide       @relation(fields: [guideID], references: [id])
  guideID       String
}

model Nationality {
  id           String        @id @default(uuid())
  name         String
  code         String
  users        User[]
  transactions Transaction[]
}

model Contents {
  id           Int      @id @default(autoincrement())
  page         Pages    @relation(fields: [pageId], references: [id])
  pageId       Int
  sectionName  String   @db.Text
  sectionOrder Int
  context      Json
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Pages {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  Contents  Contents[]
}

model Events {
  id          Int            @id @default(autoincrement())
  iteration   EventIteration @relation(fields: [iterationId], references: [id])
  iterationId Int
  isFree      Boolean
  price       Float          @default(0)
  name        String
  desc        String         @db.Text
  image       String
}

model EventIteration {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Events Events[]
}

model Purchasable {
  id               Int                @id @default(autoincrement())
  name             String
  desc             String             @db.Text
  unit             String
  price            Float?
  priceUmum        Float?
  priceMancanegara Float?
  image            String
  subType          PurchasableSubType @relation(fields: [subTypeId], references: [id])
  subTypeId        Int
}

model PurchasableType {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  PurchasableSubType PurchasableSubType[]
}

model PurchasableSubType {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  type        PurchasableType @relation(fields: [typeId], references: [id])
  typeId      Int
  Purchasable Purchasable[]
}
